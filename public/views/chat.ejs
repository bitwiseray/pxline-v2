<!DOCTYPE html>
<html lang="en" prefix="og: https://ogp.me/ns#">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="A minimalistic vanilla chat app made in Node.js">
  <meta name="robots" content="follow, index">
  <meta name="author" content="PxLine Team">
  <meta name="theme-color" content="#7A2FFF">
  <meta name="keywords" content="chat app, nodejs chat app">
  <meta property="og:site_name" content="PxLine">
  <meta property="og:image" content="/assets/preview-logo.jpg">
  <meta property="og:image:width" content="300">
  <meta property="og:image:height" content="300">
  <meta property="og:locale" content="en_US">
  <title>PxLine â€” Chat</title>
  <link rel="icon" href="/assets/logo.jpg" type="image/x-icon">
  <link rel="stylesheet" href="/css/chat.css">
  <link rel="stylesheet" href="/css/toast.css">
  <link rel="stylesheet" href="/css/hamburger.css">
  <script defer src="/socket.io/socket.io.js"></script>
  <script defer src="/scripts/chat.js"></script>
  <link href='https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css' rel='stylesheet'>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment-with-locales.min.js" integrity="sha512-4F1cxYdMiAW98oomSLaygEwmCnIP38pb4Kx70yQYqRwLVCs3DbRumfBq82T08g/4LJ/smbFGFpmeFlQgoDccgg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>

<body>
  <div class="toast-container"></div>
  <div class="chat-container">
    <div class="chat-header">
      <div class="imgcontent">
        <a onclick="window.history.back();"><i class="fa-solid fa-arrow-left"></i></a>
        <div class="imgBx">
          <img src="" alt="" />
        </div>
        <h3></h3>
      </div>
      <div class="menu-container">
        <div class="options-container hamburger-menu" id="hamburger-menu">
            <i class='bx bx-dots-vertical-rounded dots'></i>
        </div>
        <div class="menu" id="menu">
          <a href="" id="redirectOpt"></a>
          <a href="#" style="color: red;"><i class='bx bx-error-alt'></i> Report</a>
          <a href="#" id="leaveOpt" style="color: red;"></a>
        </div>
    </div>
    </div>
    <div class="message-container"></div>
    <div class="messageInput">
      <i class='bx bx-image-add' id='fileAddI'></i>
      <div class="input">
        <form action="/upload/profile" method="POST" enctype="multipart/form-data">
          <input type="file" id="attachmentInput" name="upload" style="display: none;" accept="image/*">
        </form>
        <textarea id="inp" placeholder="Message"></textarea>
      </div>
      <div class="send"><i class='bx bx-send'></i></div>
    </div>
  </div>
  </div>
  <script src="/scripts/chat-ui.js"></script>
  <script>
    let messages = <%-JSON.stringify(messages)%>;
  </script>
  <script src="/scripts/main.js"></script>
  <script>
    const type = '<%=extType%>';
    const room = <%-JSON.stringify(extroom)%>;
    const extuser = <%-JSON.stringify(extusers)%>;
    const members = <%-JSON.stringify(extusers)%>;
    const user = <%-JSON.stringify(user)%>;
    const chats = <%-JSON.stringify(chats)%>;
    function initChat() {
      if (type === 'room') {
        createChatHeader(room.title, room.icon);
        if (Array.isArray(chats.svd_chats) && chats.svd_chats.length >= 0) {
          chats.svd_chats.forEach(chat => {
            const senderUser = chat.sender === user._id ? user : members.find(member => member._id === chat.sender);
            appendMessage(senderUser.image, senderUser.display_name, senderUser.user_name, chat.content.text, chat.content.timestamp, chat.attachments, chat._id);
          });
        } else {
          console.error('Invalid chats object or svd_chats array');
        }
      } else {
        createChatHeader(extuser.display_name, extuser.image);
        if (Array.isArray(chats.svd_chats)) {
          chats.svd_chats.forEach(chat => {
            const senderUser = chat.sender === user._id ? user : extuser;
            appendMessage(senderUser.image, senderUser.display_name, senderUser.user_name, chat.content.text, chat.content.timestamp, chat.attachments, chat._id);
          });
        } else {
          console.error('Invalid chats object or svd_chats array');
        }
      }
    }
    let isAttached;
    let mediaCache;
    document.addEventListener('DOMContentLoaded', () => {
      const uploadIcon = document.getElementById('fileAddI');
      const uploadInput = document.getElementById('attachmentInput');
      let optRed = document.getElementById('redirectOpt');
      let optLeave = document.getElementById('leaveOpt');
      if (type === 'DM') {
        optRed.innerHTML = '<i class="bx bxs-user-detail"></i> See profile'
        optRed.href = `/${extuser.user_name}`;
        optLeave.innerHTML = '<i class="bx bxs-user-x"></i> Block'
      } else {
        optRed.innerHTML = '<i class="bx bxs-group"></i> Group info';
        optLeave.innerHTML = '<i class="bx bx-log-out-circle"></i> Leave';
        optRed.href = `/${room._id}`;
      }
      optLeave.addEventListener('click', async (e) => {
        if (type === 'room') {
          try {
            const response = await fetch(`/leave/${room._id}`, {
              method: 'DELETE',
            });
            if (response.ok) {
              popToast('success', 'Successfully left the room');
              window.location.href = '/';
            } else {
              popToast('error', response.statusText);
            }
          } catch (error) {
            console.error('An error occurred:', error);
          }
        }
      });
      uploadIcon.addEventListener('click', () => {
        uploadInput.click();
      });
      uploadInput.addEventListener('change', async (e) => {
        const file = e.target.files[0];
        const formData = new FormData();
        mediaCache = appendMediaCache(user.image, user.display_name, URL.createObjectURL(file));
        formData.append('upload', file);
          try {
            const response = await fetch('/cdn', {
              method: 'POST',
              body: formData
            });
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            const data = await response.json();
            isAttached = data;
            sendMessage();
          } catch (error) {
            console.error('Fetch error:', error);
          }
        });
      });
    initChat();
  </script>
</body>

</html>