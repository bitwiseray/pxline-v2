<!DOCTYPE html>
<html lang="en" prefix="og: https://ogp.me/ns#">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="A minimalistic vanilla chat app made in Node.js">
  <meta name="robots" content="follow, index">
  <meta name="author" content="PxLine Team">
  <meta name="theme-color" content="#7A2FFF">
  <meta name="keywords" content="chat app, nodejs chat app">
  <meta property="og:site_name" content="PxLine">
  <meta property="og:image" content="/assets/preview-logo.jpg">
  <meta property="og:image:width" content="300">
  <meta property="og:image:height" content="300">
  <meta property="og:locale" content="en_US">
  <title>PxLine â€” Chat</title>
  <link rel="icon" href="/assets/logo.jpg" type="image/x-icon">
  <link rel="stylesheet" href="/css/chat.css">
  <link rel="stylesheet" href="/css/toast.css">
  <link rel="stylesheet" href="/css/hamburger.css">
  <script defer src="/socket.io/socket.io.js"></script>
  <script defer src="/scripts/chat.js"></script>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment-with-locales.min.js" integrity="sha512-4F1cxYdMiAW98oomSLaygEwmCnIP38pb4Kx70yQYqRwLVCs3DbRumfBq82T08g/4LJ/smbFGFpmeFlQgoDccgg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>

<body>
  <div class="toast-container"></div>
  <div class="chat-container">
    <div class="chat-header">
      <div class="message-options" style="display: none;">
        <i class="material-symbols-outlined close-icon" onclick="messageHandler.removeOptions()">close</i>
        <div class="options">
          <i class="material-symbols-outlined" onclick="messageHandler.copyText();">content_copy</i>
          <i class="material-symbols-outlined edit-icon">edit</i>
          <i class="material-symbols-outlined delete-icon" onclick="messageHandler.delete();">delete</i>
        </div>
      </div>
      <div class="imgcontent">
        <a onclick="window.history.back();"><i class="material-symbols-outlined" style="font-size: 1.40em;">keyboard_backspace</i></a>
        <div class="imgBx">
          <img src="" alt="" />
        </div>
        <h3></h3>
      </div>
      <div class="menu-container">
        <div class="options-container hamburger-menu" id="hamburger-menu"><i class="material-symbols-outlined">more_vert</i></div>
        <div class="menu" id="menu">
          <a href="" id="redirectOpt"></a>
          <a href="#" style="color: red;"><i class="material-symbols-outlined">flag</i> Report</a>
          <a href="#" id="leaveOpt" style="color: red;"></a>
        </div>
      </div>
    </div>
    <div class="message-container"></div>
    <div class="messageInput">
      <i class="material-symbols-outlined" id='fileAddI'>add_photo_alternate</i>
      <div class="input">
        <form action="/upload/profile" method="POST" enctype="multipart/form-data">
          <input type="file" id="attachmentInput" name="upload" style="display: none;" accept="image/*">
        </form>
        <textarea id="inp" placeholder="Message"></textarea>
      </div>
      <div class="send"><i class="material-symbols-outlined">send</i></div>
    </div>
  </div>
  </div>
  <script src="/scripts/chat-ui.js"></script>
  <script src="/scripts/message-handlers.js"></script>
  <script>
    let messages = <%-JSON.stringify(messages)%>;
  </script>
  <script src="/scripts/main.js"></script>
  <script>
    async function initChatsIndexes() {
      const response = await fetch(`/source/chat/${new URLSearchParams(window.location.search).get('id')}`, {
        method: 'GET'
      });
      if (response.ok) {
        const data = await response.json();
        const { type, room, extusers, user, chats } = data;
        localStorage.setItem('ext', JSON.stringify({ type, room, chats }));
        let lastDividerTimestamp = 0;
        function initChat() {
          if (type === 'room') {
            createChatHeader(room.title, room.icon);
            if (Array.isArray(chats.svd_chats) && chats.svd_chats.length >= 0) {
              chats.svd_chats.forEach(chat => {
                const senderUser = chat.sender === user._id ? user : members.find(member => member._id === chat.sender);
                appendMessage(senderUser.image, senderUser.display_name, senderUser.user_name, chat.content.text, chat.content.timestamp, chat.attachments, chat._id);
                lastDividerTimestamp = chat.content.timestamp;
              });
            } else {
              console.error('Invalid chats object or svd_chats array');
            }
          } else {
            createChatHeader(extusers.display_name, extusers.image);
            if (Array.isArray(chats.svd_chats)) {
              chats.svd_chats.forEach(chat => {
                const senderUser = chat.sender === user._id ? user : extusers;
                appendMessage(senderUser.image, senderUser.display_name, senderUser.user_name, chat.content.text, chat.content.timestamp, chat.attachments, chat._id);
                lastDividerTimestamp = chat.content.timestamp;
              });
              
            } else {
              console.error('Invalid chats object or svd_chats array');
            }
          }
        }
        localStorage.setItem('lastDivider', lastDividerTimestamp);
      }
      initChat();
      setChat();
    }
    document.addEventListener('DOMContentLoaded', () => {
      initChatsIndexes();
    });
  </script>
</body>

</html>